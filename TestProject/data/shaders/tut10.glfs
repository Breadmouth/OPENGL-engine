#version 410

in vec2 vTexCoord; 

out vec4 FragColor; 

uniform sampler2D diffuse; 

vec4 Simple()
{
	return texture(diffuse,vTexCoord);
}

vec4 BoxBlur()
{
	vec2 texel = 1.0f / textureSize(diffuse, 0).xy;
	
	//9-tap box kernel
	vec4 colour = texture(diffuse, vTexCoord);
	colour += texture(diffuse, vTexCoord + vec2(-texel.x, texel.y));
	colour += texture(diffuse, vTexCoord + vec2(-texel.x, 0));
	colour += texture(diffuse, vTexCoord + vec2(-texel.x, -texel.y));
	colour += texture(diffuse, vTexCoord + vec2(0, texel.y));
	colour += texture(diffuse, vTexCoord + vec2(0, -texel.y));
	colour += texture(diffuse, vTexCoord + vec2(texel.x, texel.y));
	colour += texture(diffuse, vTexCoord + vec2(texel.x, 0));
	colour += texture(diffuse, vTexCoord + vec2(texel.x, -texel.y));
	
	return colour / 9;
}

vec4 Distort()
{
	vec2 mid = vec2(0.5f);
	
	float distanceFromCentre = distance(vTexCoord, mid);
	vec2 normalizedCoord = normalize(vTexCoord - mid);
	float bias = distanceFromCentre + sin(distanceFromCentre * 15) * 0.02f;
	
	vec2 newCoord = mid + bias * normalizedCoord;
	return texture(diffuse, newCoord);
}

vec4 GreyScale()
{
	vec4 colour = texture(diffuse, vTexCoord);
	float grey = (colour.r + colour.g + colour.b) / 3;
	return vec4(grey, grey, grey, 1.0);
}

vec4 Sepia()
{
	vec4 inColour = texture(diffuse, vTexCoord);
	vec4 outColour;
	outColour.r = (inColour.r * 0.393) + (inColour.g * 0.769) + (inColour.b * 0.189);
	outColour.g = (inColour.r * 0.349) + (inColour.g * 0.686) + (inColour.b * 0.168);
	outColour.b = (inColour.r * 0.272) + (inColour.g * 0.534) + (inColour.b * 0.131);
	
	return outColour;
}

float threshold(in float thr1, in float thr2 , in float val) 
{
	if (val < thr1) {return 0.0;}
	if (val > thr2) {return 1.0;}
	return val;
}

// averaged pixel intensity from 3 colour channels
float avg_intensity(in vec4 pix) 
{
	return (pix.r + pix.g + pix.b)/3.;
}

vec4 get_pixel(in vec2 coords, in float dx, in float dy) 
{
	return texture2D(diffuse ,coords + vec2(dx, dy));
}

// returns pixel colour
float IsEdge(in vec2 coords)
{
	float dxtex = 1.0 / textureSize(diffuse, 0).x /*image width*/;
	float dytex = 1.0 / textureSize(diffuse, 0).y /*image height*/;
	float pix[9];
	int k = -1;
	float delta;
	
	// read neighbouring pixel intensities
	for (int i=-1; i<2; i++) 
	{
		for(int j=-1; j<2; j++) 
		{
			k++;
			pix[k] = avg_intensity(get_pixel(coords, float(i)*dxtex, float(j)*dytex));
		}
	}
	
	// average colour differences around neighbouring pixels
	delta = (abs(pix[1]-pix[7])+
			abs(pix[5]-pix[3]) +
			abs(pix[0]-pix[8])+
			abs(pix[2]-pix[6])
			)/4.;
	
	return threshold(0.25,0.4,clamp(1.8*delta,0.0,1.0));
}

vec4 EdgeDetect()
{
	vec4 outColour = texture(diffuse, vTexCoord);
	float edgeColour = IsEdge(vTexCoord);
    vec4 colour = vec4(edgeColour);
	return outColour - colour;
}

vec4 EdgeHighlight()
{
	vec4 outColour = vec4(0, 0, 0, 1);
    outColour.g = IsEdge(vTexCoord);
	return outColour;
} 

vec4 Sharpen()
{
	vec2 texel = 1.0f / textureSize(diffuse, 0);
	
	vec4 colour = texture(diffuse, vTexCoord) * (11/3);
	colour += texture(diffuse, vTexCoord + vec2 (0, texel.y)) * (-2/3);
	colour += texture(diffuse, vTexCoord - vec2 (0, texel.y)) * (-2/3);
	colour += texture(diffuse, vTexCoord + vec2 (texel.x, 0)) * (-2/3);
	colour += texture(diffuse, vTexCoord - vec2 (texel.x, 0)) * (-2/3);
	colour.a = 1.0f;
	
	return colour;
}

void main()
{
	FragColor = Sharpen();
}