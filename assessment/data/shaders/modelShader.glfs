#version 410

in vec2 vTexCoord;
in vec4 vNormal;
in vec4 vPosition;
in vec4 vTangent;
in vec4 vBiTangent;

out vec4 FragColor;

uniform vec3 light;
uniform vec3 cameraPos;
uniform vec3 lightColor;
uniform float specPow;
uniform sampler2D diffuse;
uniform sampler2D normal;


void main()
{

	//create normals
	mat3 TBN = mat3( normalize( vTangent ), normalize( vBiTangent ), normalize( vNormal));
	vec3 N = texture(normal, vTexCoord).xyz * 2 - 1;
	
	//create diffuse and specular
	float d = max(0, dot(normalize(TBN * N), light));
	vec3 E = normalize( cameraPos - vPosition.xyz);
	vec3 R = reflect( -light, vNormal.xyz);
	float s = max(0, dot(E, R));
	s = pow(s, specPow);
	
	FragColor = texture(diffuse, vTexCoord) * vec4(d * lightColor + s * lightColor, 1);
}